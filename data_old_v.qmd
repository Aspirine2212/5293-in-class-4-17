---
title: "data"
format: html
editor: 
  markdown: 
    wrap: 72
---



## Description

This data set is related to camera. It includes certain features of the
camera. There are 13 properties related to these camera, which are:
Model, Release date, Max resolution, Low resolution, Effective pixels,
Zoom wide (W), Zoom tele (T), Normal focus range, Macro focus range,
Storage included Weight (inc. batteries), and Dimensions Price.\

## load the dataset

```{r}
library(dplyr)
library(tidyr)
library(ggplot2)
library(randomForest)
library(pdp)
library(vip)
library(DALEX)
library(iml)
library(purrr)
library(forcats)
library(reshape2)
library(fastshap)

camera_data <- read.csv("https://raw.githubusercontent.com/Aspirine2212/5293-in-class-4-17/main/camera_dataset.csv")

quantitative_vars <- camera_data[, c("Max.resolution", "Low.resolution", "Effective.pixels", 
                                     "Zoom.wide..W.", "Zoom.tele..T.", "Normal.focus.range", 
                                     "Weight..inc..batteries.", "Price")]

stats_summary <- quantitative_vars |>
  summarise_all(list(
    mean = ~mean(., na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    sd = ~sd(., na.rm = TRUE),
    IQR = ~IQR(., na.rm = TRUE)
  )) |>
  pivot_longer(
    everything(),
    names_to = c("variable", "stat"),
    names_sep = "_"
  ) |>
  pivot_wider(
    names_from = variable,
    values_from = value
  )

stats_summary

```

## handling the year and brand

```{r}
library(dplyr)
library(ggplot2)
library(stringr)

#getting the group for year
#camera_data <- camera_data |>
  #mutate(Year.Group = case_when(
    #Release.date >= 1994 & Release.date <= 1997 ~ "1994-1997",
    #Release.date >= 1998 & Release.date <= 2001 ~ "1998-2001",
    #Release.date >= 2002 & Release.date <= 2005 ~ "2002-2005",
    #Release.date >= 2006 & Release.date <= 2007 ~ "2006-2007"
  #))


#get the brand for each model
camera_data <- camera_data |>
  mutate(brand = word(Model, 1))

camera_data |>
  count(brand, sort = TRUE)

#colnames(camera_data)

camera_data <- camera_data %>%
  rename_with(~ gsub("\\.", "", .x)) %>%
  rename(
    ReleaseDate = Releasedate,
    MaxResolution = Maxresolution,
    LowResolution = Lowresolution,
    EffectivePixels = Effectivepixels,
    ZoomWide = ZoomwideW,
    ZoomTele = ZoomteleT,
    NormalFocus = Normalfocusrange,
    MacroFocus = Macrofocusrange,
    Weight = Weightincbatteries,
    Storage = Storageincluded,
    Brand = brand
  )

```

## Missing value analysis

```{r}
library(dplyr)

na_summary <- camera_data |>
  summarise(across(everything(), ~sum(is.na(.)))) |>
  pivot_longer(everything(), names_to = "variable", values_to = "na_count") |>
  mutate(na_percent = round(na_count / nrow(camera_data) * 100, 2))

na_summary

```

## Handling Missing Values

```{r}
library(missMDA)
library(FactoMineR)

vars_for_imputation <- camera_data %>%
  select(where(is.numeric)) %>%
  select(where(~ !all(is.na(.)))) %>%
  select(where(~ sd(., na.rm = TRUE) > 0))

# PCA
nb_pc <- estim_ncpPCA(vars_for_imputation, method = "Regularized")$ncp
imputed_data <- imputePCA(vars_for_imputation, ncp = nb_pc)
filled_data <- imputed_data$completeObs


camera_data_filled <- camera_data
camera_data_filled[names(vars_for_imputation)] <- filled_data


#sum(is.na(camera_data_filled))

```

## Basic information

```{r}
library(dplyr)

basic_stats <- camera_data_filled %>%
  select(where(is.numeric)) %>%
  summarise(across(everything(), list(
    mean = ~mean(., na.rm = TRUE),
    sd = ~sd(., na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    min = ~min(., na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ), .names = "{.col}_{.fn}"))

basic_stats_tidy <- basic_stats %>%
  pivot_longer(everything(), names_to = c("variable", ".value"), names_sep = "_")

basic_stats_tidy
```

##Random Forest

```{r}
library(randomForest)
library(iml)

camera_data_rf <- camera_data_filled %>% select(-Model)


set.seed(123)
n <- nrow(camera_data_rf)
train_index <- sample(n, size = floor(0.7 * n))
train_data <- camera_data_rf[train_index, ]
test_data <- camera_data_rf[-train_index, ]


train_data$Brand <- as.factor(train_data$Brand)
test_data$Brand <- as.factor(test_data$Brand)


rf_model <- randomForest(Price ~ ., data = train_data, importance = TRUE)


importance_df <- importance(rf_model) %>%
  as.data.frame() %>%
  tibble::rownames_to_column("Variable")


```

##Feture Importance

```{r}
library(ggplot2)
ggplot(importance_df, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Variable Importance from Random Forest",
    x = "Variable",
    y = "% Increase in MSE"
  ) +
  theme_minimal()
```

##PDP plot single

```{r}

library(randomForest)
library(iml)
library(ggplot2)

x <- train_data[, setdiff(names(train_data), "Price")]
y <- train_data$Price


x$Brand <- as.factor(x$Brand)

library(iml)
predictor <- Predictor$new(rf_model, data = x, y = y)

# FeatureEffect
pdp_zoom <- FeatureEffect$new(predictor, feature = "ZoomTele", method = "pdp")
plot(pdp_zoom)


```
##All PDP Plots

```{r}
library(pdp)
library(ggplot2)
library(purrr)
library(dplyr)



vars <- c("ZoomTele", "Weight", "LowResolution", "MaxResolution",
          "Dimensions", "ReleaseDate", "ZoomWide", "EffectivePixels",
          "MacroFocus", "NormalFocus")

df <- map(vars, function(varname) {
  pd <- pdp::partial(
    object = rf_model,
    pred.var = varname,
    train = train_data  
  )
  pd <- pd %>%
    pivot_longer(cols = 1, names_to = "name", values_to = "value")
  pd$name <- varname
  return(pd)
}) %>%
  bind_rows()

ggplot(df, aes(x = value, y = yhat)) +
  geom_line(color = "steelblue") +
  facet_wrap(~name, scales = "free_x") +
  labs(x = "Variable Value", y = "Predicted Price",
       title = "Partial Dependence Plots for Important Variables") +
  theme_bw(base_size = 13)


```

##2D Partial Dependence Plot

```{r}

library(pdp)
library(ggplot2)
library(viridis)

pdp_full <- pdp::partial(
  rf_model,
  pred.var = c("ZoomTele", "EffectivePixels"),  
  train = train_data,
  chull = TRUE
)


ggplot(pdp_full, aes(x = ZoomTele, y = EffectivePixels)) +
  geom_tile(aes(fill = yhat)) +
  geom_point(data = train_data, aes(x = ZoomTele, y = EffectivePixels), alpha = 0.4) +
  scale_fill_viridis_c(alpha = 0.75) +
  theme_minimal() +
  labs(
    x = "Zoom Telephoto Range",
    y = "Effective Pixels",
    fill = "Predicted Price",
    title = "2D Partial Dependence Plot: ZoomTele vs EffectivePixels"
  )




```

##shap generated

```{r}
library(randomForest)
library(fastshap)
library(ggplot2)

pred_fun <- function(model, newdata) {
  predict(model, newdata = newdata)
}

train_data_shap <- train_data
test_data_shap <- test_data

train_data_shap$YearGroup <- NULL
test_data_shap$YearGroup <- NULL

train_data_shap$Brand <- factor(train_data_shap$Brand)
test_data_shap$Brand <- factor(test_data_shap$Brand, 
                               levels = levels(train_data_shap$Brand))

shap_values <- fastshap::explain(
  rf_model,
  X = subset(train_data_shap, select = -Price),
  pred_wrapper = pred_fun,
  newdata = subset(test_data_shap[1:5, ], select = -Price), 
  nsim = 500,
  adjust = TRUE
)

```

##shap plot

```{r}
shap_df <- data.frame(
  Feature = colnames(subset(train_data_shap, select = -Price)),
  Shapley_Value = as.numeric(shap_values[1, ])
)


ggplot(shap_df, aes(x = reorder(Feature, Shapley_Value), y = Shapley_Value)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  coord_flip() +
  labs(
    title = "SHAP values for the first test observation",
    x = "Features",
    y = "SHAP value"
  ) +
  theme_minimal()

```



##See Split Difference

```{r}
library(randomForest)
library(dplyr)
library(tibble)
library(ggplot2)

set.seed(5293)
splits <- c(0.6, 0.7, 0.8)  
results <- list()

for (p in splits) {
  for (i in 1:10) {  
    n <- nrow(camera_data_rf)
    train_index <- sample(1:n, p * n)
    train_data <- camera_data_rf[train_index, ]
    test_data <- camera_data_rf[-train_index, ]
    
    train_data$YearGroup <- NULL
    test_data$YearGroup <- NULL
    train_data$Brand <- as.factor(train_data$Brand)
    test_data$Brand <- as.factor(test_data$Brand)
    
    rf_model <- randomForest(Price ~ ., data = train_data, importance = TRUE)
    imp_df <- as.data.frame(importance(rf_model)) %>%
      rownames_to_column("Variable") %>%
      mutate(Split = paste0(p * 100, "%"), Iteration = i)
    
    results[[length(results) + 1]] <- imp_df
  }
}


importance_all <- bind_rows(results)


ggplot(importance_all, aes(x = Variable, y = `%IncMSE`, fill = Split)) +
  geom_boxplot(position = position_dodge(width = 0.8)) +
  theme_minimal(base_size = 14) +
  labs(title = "Variable Importance Stability Under Different Train/Test Splits",
       y = "%IncMSE", x = "Variable") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


##see seed difference


```{r}
seeds <- c(101, 202, 303)
imp_list <- lapply(seeds, function(s) {
  set.seed(s)
  idx <- sample(1:nrow(camera_data_rf), 0.7 * nrow(camera_data_rf))
  model <- randomForest(Price ~ ., data = camera_data_rf[idx, ], importance = TRUE)
  imp <- importance(model)[, 1]  # %IncMSE
  return(imp)
})

imp_df <- do.call(cbind, imp_list)
colnames(imp_df) <- paste0("Seed_", seeds)
imp_df <- as.data.frame(imp_df)

imp_df <- cbind(Variable = rownames(imp_df), imp_df)

imp_df <- imp_df[, c("Variable", paste0("Seed_", seeds))]

```


##Seed differnce plot

```{r}
library(reshape2)
library(ggplot2)

colnames(imp_df)[ncol(imp_df)] <- "Variable"


melted <- melt(imp_df, id.vars = "Variable")


ggplot(melted, aes(x = variable, y = reorder(Variable, value), fill = value)) +
  geom_tile() +
  scale_fill_viridis_c() +
  labs(
    title = "Variable Importance Stability Across Seeds",
    x = "Seed",
    y = "Variable"
  ) +
  theme_minimal()

```

#Linear regression comparison

```{r}
lm_model <- lm(Price ~ ., data = train_data)


lm_importance <- as.data.frame(summary(lm_model)$coefficients)
lm_importance <- lm_importance[-1, , drop = FALSE]  #  Intercept
lm_importance$Variable <- rownames(lm_importance)
lm_importance$Importance <- abs(lm_importance$Estimate)
lm_importance <- lm_importance[, c("Variable", "Importance")]
lm_importance$Model <- "Linear Regression"


rf_importance <- importance_df[, c("Variable", "%IncMSE")]
colnames(rf_importance) <- c("Variable", "Importance")
rf_importance$Model <- "Random Forest"



combined_importance <- rbind(lm_importance, rf_importance)


library(ggplot2)

ggplot(combined_importance, aes(x = reorder(Variable, Importance), y = Importance, fill = Model)) +
  geom_bar(stat = "identity", position = "dodge") +
  coord_flip() +
  labs(
    title = "Feature Importance: Linear Regression vs Random Forest",
    x = "Feature",
    y = "Importance"
  ) +
  theme_minimal()

```