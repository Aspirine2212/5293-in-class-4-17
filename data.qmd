---
title: "data"
format: html
editor: 
  markdown: 
    wrap: 72
---

## Description

This data set is related to camera. It includes certain features of the
camera. There are 13 properties related to these camera, which are:
Model, Release date, Max resolution, Low resolution, Effective pixels,
Zoom wide (W), Zoom tele (T), Normal focus range, Macro focus range,
Storage included Weight (inc. batteries), Dimensions, and Price.\

## load the dataset

I will load the data set and see what is basic information for it.\

```{r}
library(dplyr)
library(tidyr)
<<<<<<< HEAD
library(ggplot2)
library(GGally)
=======

>>>>>>> b6c8899eb2c888d991917a0de1f7989cbbb7e2a2

camera_data <- read.csv("https://raw.githubusercontent.com/Aspirine2212/5293-in-class-4-17/main/camera_dataset.csv")

quantitative_vars <- camera_data[, c("Max.resolution", "Low.resolution", "Effective.pixels", 
                                     "Zoom.wide..W.", "Zoom.tele..T.", "Normal.focus.range", 
                                     "Weight..inc..batteries.", "Price")]

stats_summary <- quantitative_vars |>
  summarise_all(list(
    mean = ~mean(., na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    sd = ~sd(., na.rm = TRUE),
    IQR = ~IQR(., na.rm = TRUE)
  )) |>
  pivot_longer(
    everything(),
    names_to = c("variable", "stat"),
    names_sep = "_"
  ) |>
  pivot_wider(
    names_from = variable,
    values_from = value
  )

stats_summary

```

## handling the year and brand

```{r}
library(dplyr)
library(ggplot2)
library(stringr)

#getting the group for year
#camera_data <- camera_data |>
  #mutate(Year.Group = case_when(
    #Release.date >= 1994 & Release.date <= 1997 ~ "1994-1997",
    #Release.date >= 1998 & Release.date <= 2001 ~ "1998-2001",
    #Release.date >= 2002 & Release.date <= 2005 ~ "2002-2005",
    #Release.date >= 2006 & Release.date <= 2007 ~ "2006-2007"
  #))


#get the brand for each model
camera_data <- camera_data |>
  mutate(brand = word(Model, 1))

camera_data |>
  count(brand, sort = TRUE)

colnames(camera_data)

camera_data <- camera_data %>%
  rename_with(~ gsub("\\.", "", .x)) %>%
  rename(
    ReleaseDate = Releasedate,
    MaxResolution = Maxresolution,
    LowResolution = Lowresolution,
    EffectivePixels = Effectivepixels,
    ZoomWide = ZoomwideW,
    ZoomTele = ZoomteleT,
    NormalFocus = Normalfocusrange,
    MacroFocus = Macrofocusrange,
    Weight = Weightincbatteries,
    Storage = Storageincluded,
    Brand = brand
  )

```

## Missing value analysis

Find out how many missing values are there in the dataset.\

```{r}
library(dplyr)

na_summary <- camera_data |>
  summarise(across(everything(), ~sum(is.na(.)))) |>
  pivot_longer(everything(), names_to = "variable", values_to = "na_count") |>
  mutate(na_percent = round(na_count / nrow(camera_data) * 100, 2))

na_summary

```

## Handling Missing Values

Using PCA to fill out the missing values.

```{r}
library(missMDA)
library(FactoMineR)

vars_for_imputation <- camera_data %>%
  select(where(is.numeric)) %>%
  select(where(~ !all(is.na(.)))) %>%
  select(where(~ sd(., na.rm = TRUE) > 0))

# PCA
nb_pc <- estim_ncpPCA(vars_for_imputation, method = "Regularized")$ncp
imputed_data <- imputePCA(vars_for_imputation, ncp = nb_pc)
filled_data <- imputed_data$completeObs


camera_data_filled <- camera_data
camera_data_filled[names(vars_for_imputation)] <- filled_data


sum(is.na(camera_data_filled))

```

## Basic information

Here are the basic information for the cleaned data frame.

```{r}
library(dplyr)

basic_stats <- camera_data_filled %>%
  select(where(is.numeric)) %>%
  summarise(across(everything(), list(
    mean = ~mean(., na.rm = TRUE),
    sd = ~sd(., na.rm = TRUE),
    median = ~median(., na.rm = TRUE),
    min = ~min(., na.rm = TRUE),
    max = ~max(., na.rm = TRUE)
  ), .names = "{.col}_{.fn}"))

basic_stats_tidy <- basic_stats %>%
  pivot_longer(everything(), names_to = c("variable", ".value"), names_sep = "_")

basic_stats_tidy

saveRDS(camera_data_filled, file = "camera_data_clean.rds")
```

## The Distribution of Camera Price

Get a basic ideas on different brands for the camera.

```{r}
<<<<<<< HEAD
=======
library(randomForest)
# 去掉 Model 列
camera_data_rf <- camera_data_filled %>%
  select(-Model)

# 构建模型
set.seed(123)
rf_model <- randomForest(Price ~ ., data = camera_data_rf, importance = TRUE)

# 提取变量重要性
importance_df <- importance(rf_model) %>%
  as.data.frame() %>%
  tibble::rownames_to_column("Variable")

# 画图
>>>>>>> b6c8899eb2c888d991917a0de1f7989cbbb7e2a2
library(ggplot2)

camera_data_filled %>%
  count(Brand) %>%
  ggplot(aes(x = "", y = n, fill = Brand)) +
  geom_col(width = 1) +
  coord_polar(theta = "y") +
  labs(title = "Camera Brand Distribution") +
  theme_void()

```

## Correlation Matrix

Find out the correlations among variables.\

```{r}
library(GGally)

numeric_vars <- camera_data_filled %>% 
  select(where(is.numeric))

ggcorr(numeric_vars, 
       label = TRUE, 
       label_round = 2, 
       label_size = 3.5,    
       hjust = 0.75,         
       size = 3,             
       low = "white", mid = "gray90", high = "red", midpoint = 0, 
       layout.exp = 1.2     
) + 
  ggtitle("Correlation Matrix of Numeric Variables") +
  theme(plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
```

## Histograms
Selecting out the ditributions for certain factors.\
```{r}
library(ggplot2)
library(tidyr)

camera_data_filled %>%
  select(Price, EffectivePixels, MaxResolution, Weight) %>%
  pivot_longer(cols = everything(), names_to = "variable", values_to = "value") %>%
  ggplot(aes(x = value)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "white") +
  facet_wrap(~ variable, scales = "free") +
  labs(title = "Histograms of Key Numerical Variables", x = NULL, y = "Count")

```
